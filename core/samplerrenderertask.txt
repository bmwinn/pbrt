
{SamplerRendererTask Declarations}:
   class SamplerRendererTask : public Task {
   public:
      {SamplerRendererTask Public Methods}
   private:
      {SamplerRendererTask Private Data}
   }

{SamplerRendererTask Private Data}:
   const Scene *scene;
   const Renderer *renderer;
   Camera *camera;
   Sampler *mainSampler;
   Sample *origSample;
   int taskNum, taskCount;

{SamplerRendererTask Public Methods}:
   SamplerRendererTask(const Scene *sc, Renderer *ren, Camera *c,
      Sampler *ms, Sample *sam, int tn, int tc)
   {
      scene = sc;
      renderer = ren;
      camera = c;
      mainSampler = ms;
      origSample = sam;
      taskNum = tn;
      taskCount = tc;
   }

{SamplerRendererTask Definitions}:
   void SamplerRendererTask::Run() {
      {Get sub-Sampler for sampleRendererTask}
      {Declare local variables used for rendering loop}
      {Allocate space for samples and intersections}
      {Get samples from Sampler and update image}
      {Clean up after SamplerRendererTask is done with its image region}
   }

{Get sub-Sampler for SamplerRendererTask):
   Sampler *sampler = mainSampler->GetSubSampler(taskNum, taskCount);
   if (!sampler) return;

{Declare local variables used for rendering loop}:
   MemoryArena arena;
   RNG rng(taskNum);

{Allocate space for smaples and intersections}:
   int maxSamples = sampler->MaximumSampleCount();
   Sample *samples = origSample->Duplicate(maxSamples);
   RayDifferential *rays = new RayDifferential[maxSamples];
   Spectrum *Ls = new Spectrum[maxSamples];
   Spectrum *Ts = new Spectrum[maxSamples];
   Intersection *isects = new Intersection[maxSamples];

{Get samples from Sampler and update image}:
   int sampleCount;
   while ((sampleCount = sampler->GetMoreSamples(samples, rng)) > 0) {
      {Generate camera rays and compute radiance along rays}
      {Report sample results to Sampler, add contributions to image}
      {Free MemoryArena memory from computing image sample values}
   }

{Generate camera rays and compute radiance along rays}:
   for (int i = 0; i < samplecount; ++i) {
      {Find camera ray for sample[i]}
      {Evaluate radiance along camera ray}
   }

{Find camera ray for sample[i]}:
   float rayWeight = camera->GenerateRayDifferential(samples[i], &rays[i]);
   rays[i].ScaleDifferentials(1.f / sqrtf(sampler->samplesPerPixel));

{Evaluate radiance along camera ray}:
   if (rayWeight > 0.f)
      Ls[i] = rayWeight * renderer->Li(scene, rays[i], &samples[i], rng,
         arena, &isects[i], &Ts[i]);
   else {
      Ls[i] = 0.f;
      Ts[i] = 1.f;
   }

{Report sample results to Sampler, add contributions to image}:
   if (sampler->ReportResults(samples, rays, Ls, isects, sampleCount))
      for (int i = 0; i < sampleCount; ++i)
         camera->film->AddSample(samples[i], Ls[i]);

{Free MemoryArena memory from computing image sample values}:
   arena.FreeAll();


      
