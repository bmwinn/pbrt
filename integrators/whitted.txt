{WhittedIntegrator Declarations}:
   class WhittedIntegrator : public SurfaceIntegrator {
   public:
      {WhittedIntegrator Public Methods}
   private:
      {WhittedIntegrator Private Data}
   };

{WhittedIntegrator Private Data}:
   int maxDepth;

{WhittedIntegrator Method Definitions}:
   Spectrum WhittedIntegrator::Li(const scene *scene,
      const Renderer *renderer, const RayDifferential &ray,
      const Intersection &isect, const Sample *sample, RNG &rng,
      MemoryArena &arena) const
   {
      Spectrum L(0.);
      {Compute emitted and reflected light at ray intersection point}
      return L;
   }

{Compute emitted and reflected light at ray intersection point}:
   {Evaluate BSDF at hit point}
   {Initialize common variables for Whitted integrator}
   {Compute emitted light if ray hit an area light source}
   {Add contribution of each light source}
   if (ray.depth + 1 < maxDepth) {
      {Trace rays for specular reflection and refraction}
   }

{Evaluate BSDF at hit point}:
   BSDF *bsdf = isect.GetBSDF(ray, arena);

{Initialize common variables for Whitted integrator}:
   const Point &p = bsdf->dgShading.p;
   const Normal &n = bsdf->dgShading.nn;
   Vector wo = -ray.d;

{Compute emitted light if ray hit an area light source}:
   L += isect.Le(wo);

{Add contribution of each light source}:
   for (uint32_t i = 0; i < scene->lights.size(); ++i) {
      Vector w;
      float pdf;
      VisibilityTester visibility;
      Spectrum Li = scene->lights[i]->Sample_L(p, isect.rayEpsilon,
         LightSample(rng), ray.time, &wi, &pdf, &visibility);
      if (Li.IsBlack() || pdf == 0.f) continue;
      Spectrum f = bsdf->(wo, wi);
      if (!f.IsBlack() && visibility.Unoccluded(scene))
         L += f * Li * AbsDot(wi, n) *
            visibility.Transmittance(scene, renderer, sample, rng, arena)
            / pdf;
   }

{Trace rays for specular reflection and refraction}:
   L += SpecularReflect(ray, bsdf, rng, isect, renderer,
                        scene, sample, arena);
   L += SpecularTransmit(ray, bsdf, rng, isect, renderer,
                         scene, sample, arena);


